[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "devbox"
version = "1.0.0"
description = ""
readme = "README.md"
license = "MIT"
authors = ["Torsten Scholak <torsten.scholak@googlemail.com>"]
maintainers = ["Torsten Scholak <torsten.scholak@googlemail.com>"]
keywords = [
]
classifiers = [
]
packages = [
    {include = "lambdalabs", from = "src"},
    {include = "devbox", from = "src"}
]

[tool.poetry.dependencies]
python = ">=3.11"
# Core dependencies required by all backends
pydantic = ">=2.0.0"
hydra-core = ">=1.3.0"
omegaconf = ">=2.3.0"
aiohttp = ">=3.8.0"
rich = ">=13.0.0"
jinja2 = ">=3.0.0"

[tool.poetry.group.dev.dependencies]
# Testing framework
pytest = ">=7.0.0"
pytest-asyncio = ">=0.21.0"
pytest-cov = ">=4.0.0"
pytest-mock = ">=3.10.0"
hypothesis = "^6.140.2"

# Code formatting and linting
black = ">=23.0.0"
ruff = "^0.13.1"

# Type checking
mypy = ">=1.0.0"

# Code generation
datamodel-code-generator = {extras = ["http"], version = ">=0.25.0"}

# Pre-commit hooks
pre-commit = ">=3.0.0"

[tool.poetry.group.docs.dependencies]

[tool.poetry.extras]

[tool.poetry.urls]
Homepage = "https://github.com/tscholak/devbox"
Repository = "https://github.com/tscholak/devbox"
Issues = "https://github.com/tscholak/devbox/issues"
Documentation = "https://github.com/tscholak/devbox/blob/main/README.md"

[tool.poetry.scripts]
devbox = "devbox.__main__:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--color=yes",
    "--cov=src/devbox",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "backend: marks tests that require specific backends",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src/devbox"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ["py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''


[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".venv",
    "build",
    "dist",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    # API clients
    "aiohttp.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 88
target-version = "py312"  # Use py312 for now (ruff doesn't support py313 yet)
fix = true  # Automatically fix issues when possible

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort (import sorting)
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade - enforces modern Python patterns
    "FA", # flake8-future-annotations
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.pyupgrade]
# Remove imports from typing that are available in stdlib
keep-runtime-typing = false

[tool.ruff.lint.isort]
known-first-party = ["devbox"]
combine-as-imports = true
force-sort-within-sections = true
lines-after-imports = 2

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "src/devbox/__init__.py:__version__",
]
